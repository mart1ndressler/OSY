// ************************************************************************
//
//               Demo program for OSY labs
//
// Subject:      Operating systems
// Author:       Petr Olivka, petr.olivka@vsb.cz, 12/2023
// Organization: Department of Computer Science, FEECS,
//               VSB-Technical University of Ostrava, CZ
//
// File:         FreeRTOS TCP/IP Demo
//
// ************************************************************************
//
// All mapped LEDs and switches and their PINs and GPIOs:
// See schema in APPS syllabus.
//
// Switches:
// Name        PIN                GPIO
// PTC9        SW_PTC9_PIN        SW_PTC9_GPIO
// PTC10    SW_PTC10_PIN    SW_PTC10_GPIO
// PTC11    SW_PTC11_PIN    SW_PTC11_GPIO
// PTC12    SW_PTC12_PIN    SW_PTC12_GPIO
//
// LEDs:
// Name        PIN                GPIO
// PTA1        LED_PTA1_PIN   LED_PTA1_GPIO
// PTA2        LED_PTA2_PIN   LED_PTA2_GPIO
//
// PTC0        LED_PTC0_PIN   LED_PTC0_GPIO
// PTC1        LED_PTC1_PIN   LED_PTC1_GPIO
// PTC2        LED_PTC2_PIN   LED_PTC2_GPIO
// PTC3        LED_PTC3_PIN   LED_PTC3_GPIO
// PTC4        LED_PTC4_PIN   LED_PTC4_GPIO
// PTC5        LED_PTC5_PIN   LED_PTC5_GPIO
// PTC7        LED_PTC7_PIN   LED_PTC7_GPIO
// PTC8        LED_PTC8_PIN   LED_PTC8_GPIO
//
// PTB2        LED_PTB2_PIN   LED_PTB2_GPIO
// PTB3        LED_PTB3_PIN   LED_PTB3_GPIO
// PTB9        LED_PTB9_PIN   LED_PTB9_GPIO
// PTB10    LED_PTB10_PIN  LED_PTB10_GPIO
// PTB11    LED_PTB11_PIN  LED_PTB11_GPIO
// PTB18    LED_PTB18_PIN  LED_PTB18_GPIO
// PTB19    LED_PTB19_PIN  LED_PTB19_GPIO
// PTB20    LED_PTB20_PIN  LED_PTB20_GPIO
// PTB23    LED_PTB23_PIN  LED_PTB23_GPIO


#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MK64F12.h"
#include "fsl_debug_console.h"
#include "fsl_sysmpu.h"

#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "timers.h"
#include <cstdlib>
#include <cctype>

#include "fsl_ftm.h"

#include "FreeRTOS_IP.h"
#include "FreeRTOS_Sockets.h"

// Task priorities.
#define LOW_TASK_PRIORITY         (configMAX_PRIORITIES - 2)
#define NORMAL_TASK_PRIORITY     (configMAX_PRIORITIES - 1)
#define HIGH_TASK_PRIORITY         (configMAX_PRIORITIES)

#define TASK_NAME_LED_PTA        "led_pta"
#define TASK_NAME_SOCKET_SRV    "socket_srv"
#define TASK_NAME_SOCKET_CLI    "socket_cli"

#define SOCKET_SRV_TOUT            1000
#define SOCKET_SRV_BUF_SIZE        256
#define SOCKET_SRV_PORT            3333

#define SOCKET_CLI_PORT            3333

#define LED_PTA_NUM     2
#define LED_PTC_NUM        8
#define LED_PTB_NUM        9

/*
#define RGB_RED_PIN   LED_PTB18_PIN
#define RGB_GREEN_PIN LED_PTB19_PIN
#define RGB_BLUE_PIN  LED_PTB20_PIN

#define RGB_RED_GPIO   LED_PTB18_GPIO
#define RGB_GREEN_GPIO LED_PTB19_GPIO
#define RGB_BLUE_GPIO  LED_PTB20_GPIO*/

#define PWM_PERIOD 25


// pair of GPIO port and LED pin.
struct LED_Data
{
    uint32_t m_led_pin;
    GPIO_Type *m_led_gpio;
};

// all PTAx LEDs in array
LED_Data g_led_pta[ LED_PTA_NUM ] =
{
        { LED_PTA1_PIN, LED_PTA1_GPIO },
        { LED_PTA2_PIN, LED_PTA2_GPIO },
};

// all PTCx LEDs in array
LED_Data g_led_ptc[ LED_PTC_NUM ] =
{
        { LED_PTC0_PIN, LED_PTC0_GPIO },
        { LED_PTC1_PIN, LED_PTC1_GPIO },
        { LED_PTC2_PIN, LED_PTC2_GPIO },
        { LED_PTC3_PIN, LED_PTC3_GPIO },
        { LED_PTC4_PIN, LED_PTC4_GPIO },
        { LED_PTC5_PIN, LED_PTC5_GPIO },
        { LED_PTC7_PIN, LED_PTC7_GPIO },
        { LED_PTC8_PIN, LED_PTC8_GPIO },
};

LED_Data g_rgb[LED_PTB_NUM] =
{
        { LED_PTB2_PIN, LED_PTB2_GPIO},
        {LED_PTB3_PIN, LED_PTB3_GPIO},
        {LED_PTB9_PIN, LED_PTB9_GPIO},
        {LED_PTB10_PIN, LED_PTB10_GPIO},
        {LED_PTB11_PIN, LED_PTB11_GPIO},
        {LED_PTB18_PIN, LED_PTB18_GPIO},
        {LED_PTB19_PIN, LED_PTB19_GPIO},
        {LED_PTB20_PIN, LED_PTB20_GPIO},
        {LED_PTB23_PIN, LED_PTB23_GPIO},
};

QueueHandle_t ledQueue = NULL;

typedef struct {
    GPIO_Type *gpio;
    uint32_t pin;
    TickType_t duration; // Trvání bliknutí
} LedBlinkCommand;

// Fronta pro Morseovku
QueueHandle_t morseQueue = NULL;

// Struktura příkazu pro Morseovku
typedef struct {
    char sequence[64]; // Sekvence Morseovy abecedy
    xSocket_t clientSocket; // Socket klienta, který Morseovku zadal
} MorseCommand;

BaseType_t morseActive = pdFALSE;

// Fronta pro RGB příkazy
//QueueHandle_t rgbQueue = NULL;

// Struktura příkazu pro RGB LED
typedef struct {
    uint8_t r; // Červená složka (0–255)
    uint8_t g; // Zelená složka (0–255)
    uint8_t b; // Modrá složka (0–255)
} RgbCommand;

RgbCommand current_rgb_cmd = {0, 0, 0};

// Inicializace hodnot pro intenzitu barev (0-255)
uint8_t red_intensity = 0;
uint8_t green_intensity = 0;
uint8_t blue_intensity = 0;



// Funkce pro konverzi hexadecimálního znaku na integer
uint8_t hex_to_int(char c) {
    if (c >= '0' && c <= '9') return c - '0';
    if (c >= 'A' && c <= 'F') return c - 'A' + 10;
    if (c >= 'a' && c <= 'f') return c - 'a' + 10;
    return 0;
}

// Funkce pro nastavení barvy LED podle zadané barvy ve formátu "#RRGGBB"
void set_rgb_color(const char* color) {
    if (strlen(color) == 7 && color[0] == '#') {
        //RgbCommand rgbCmd;

        current_rgb_cmd.r = (hex_to_int(color[1]) << 4) | hex_to_int(color[2]);
        current_rgb_cmd.g = (hex_to_int(color[3]) << 4) | hex_to_int(color[4]);
        current_rgb_cmd.b = (hex_to_int(color[5]) << 4) | hex_to_int(color[6]);

        // Parsování jednotlivých složek RGB
        /*rgbCmd.r = (hex_to_int(color[1]) << 4) | hex_to_int(color[2]);
        rgbCmd.g = (hex_to_int(color[3]) << 4) | hex_to_int(color[4]);
        rgbCmd.b = (hex_to_int(color[5]) << 4) | hex_to_int(color[6]);*/

        //PRINTF("Parsed RGB values: R=%d, G=%d, B=%d\n", rgbCmd.r, rgbCmd.g, rgbCmd.b);

        // Odeslání do fronty pro RGB task
        // xQueueSend(rgbQueue, &rgbCmd, 0);
    } else {
        PRINTF("Invalid RGB format in set_rgb_color: %s\n", color);
    }
}

// Random number generator for TCP/IP stack
BaseType_t xApplicationGetRandomNumber( uint32_t * tp_pul_number ) { return uxRand(); }


// Some task stack overflow
void vApplicationStackOverflowHook( xTaskHandle *tp_task_handle, signed portCHAR *tp_task_name )
{
    PRINTF( "STACK PROBLEM %s.\r\n", tp_task_name );
}


// This task blink alternatively both PTAx LEDs
void task_led_pta_blink( void *t_arg )
{
    uint32_t l_inx = 0;

    while ( 1 )
    {
        // switch LED on
        GPIO_PinWrite( g_led_pta[ l_inx ].m_led_gpio, g_led_pta[ l_inx ].m_led_pin, 1 );
        vTaskDelay( 200 );
        // switch LED off
        GPIO_PinWrite( g_led_pta[ l_inx ].m_led_gpio, g_led_pta[ l_inx ].m_led_pin, 0 );
        // next LED
        l_inx++;
        l_inx %= LED_PTA_NUM;
    }
}

void task_led_blink(void *pvParameters) {
    LedBlinkCommand cmd;
    while (1) {
        if (xQueueReceive(ledQueue, &cmd, portMAX_DELAY) == pdTRUE) {
            // Rozlišení podle barvy
            GPIO_PinWrite(cmd.gpio, cmd.pin, 1);
            vTaskDelay(cmd.duration);
            GPIO_PinWrite(cmd.gpio, cmd.pin, 0);
        }
    }
}

void task_morse(void *pvParameters) {
    MorseCommand cmd;
    while (1) {
        // Čekání na sekvenci Morseovky
        if (xQueueReceive(morseQueue, &cmd, portMAX_DELAY) == pdTRUE) {
            morseActive = pdTRUE; // Morseovka je aktivní

            char *seq = cmd.sequence;
            while (*seq) {
                if (*seq == '.') {
                    // Krátké bliknutí (tečka)
                    GPIO_PinWrite(g_rgb[6].m_led_gpio, g_rgb[6].m_led_pin, 1); // Zelená LED
                    vTaskDelay(pdMS_TO_TICKS(100));
                    GPIO_PinWrite(g_rgb[6].m_led_gpio, g_rgb[6].m_led_pin, 0);
                } else if (*seq == '-') {
                    // Dlouhé bliknutí (pomlčka)
                    GPIO_PinWrite(g_rgb[6].m_led_gpio, g_rgb[6].m_led_pin, 1); // Zelená LED
                    vTaskDelay(pdMS_TO_TICKS(300));
                    GPIO_PinWrite(g_rgb[6].m_led_gpio, g_rgb[6].m_led_pin, 0);
                } else if (*seq == '/') {
                    // Pauza mezi slovy
                    vTaskDelay(pdMS_TO_TICKS(700));
                }else{
                    break;
                }

                seq++;

                // Přidáme pauzu mezi znaky, pokud nejsme na konci sekvence
                if (*seq) {
                    vTaskDelay(pdMS_TO_TICKS(200)); // Pauza mezi znaky
                }
            }

            // Morseovka dokončena, pošleme zpět zprávu
            FreeRTOS_send(cmd.clientSocket, "Morse done\n", 11, 0);

            morseActive = pdFALSE; // Morseovka dokončena
        }
    }
}

void task_rgb(void *pvParameters) {
    /*RgbCommand cmd;
    uint8_t red_on_time = 0;
    uint8_t green_on_time = 0;
    uint8_t blue_on_time = 0;*/

    while (1) {
        // Zpracování nového příkazu
        /*if (xQueueReceive(rgbQueue, &cmd, 0) == pdTRUE) {
            red_on_time = (cmd.r * PWM_PERIOD) / 255;
            green_on_time = (cmd.g * PWM_PERIOD) / 255;
            blue_on_time = (cmd.b * PWM_PERIOD) / 255;
            PRINTF("RGB Task: R=%d, G=%d, B=%d\n", cmd.r, cmd.g, cmd.b);
        }

        // PWM cyklus
        for (int i = 0; i < PWM_PERIOD; i++) {
            // Červená LED
            GPIO_PinWrite(g_rgb[0].m_led_gpio, g_rgb[0].m_led_pin, (i < red_on_time));
            // Zelená LED
            GPIO_PinWrite(g_rgb[1].m_led_gpio, g_rgb[1].m_led_pin, (i < green_on_time));
            // Modrá LED
            GPIO_PinWrite(g_rgb[2].m_led_gpio, g_rgb[2].m_led_pin, (i < blue_on_time));

            vTaskDelay(pdMS_TO_TICKS(1)); // Pauza mezi PWM kroky
        }*/
        while (1) {
            uint8_t red_on_time = (current_rgb_cmd.r * PWM_PERIOD) / 255;
            uint8_t green_on_time = (current_rgb_cmd.g * PWM_PERIOD) / 255;
            uint8_t blue_on_time = (current_rgb_cmd.b * PWM_PERIOD) / 255;

            for (int i = 0; i < PWM_PERIOD; i++) {
                GPIO_PinWrite(g_rgb[0].m_led_gpio, g_rgb[0].m_led_pin, (i < red_on_time));
                GPIO_PinWrite(g_rgb[1].m_led_gpio, g_rgb[1].m_led_pin, (i < green_on_time));
                GPIO_PinWrite(g_rgb[2].m_led_gpio, g_rgb[2].m_led_pin, (i < blue_on_time));
                vTaskDelay(pdMS_TO_TICKS(1));
            }
        }
    }
}



void set_led_by_bits(uint32_t value) {
    for (int i = 0; i < LED_PTC_NUM; i++) {
        // Zjisti stav bitu na pozici i
        uint32_t bit = (value >> i) & 0x1;
        // Nastav LED podle stavu bitu
        GPIO_PinWrite(g_led_ptc[i].m_led_gpio, g_led_ptc[i].m_led_pin, bit);
    }
}

void cleanup() {
    for (int i = 0; i < 8; i++) {
        GPIO_PinWrite(g_led_ptc[i].m_led_gpio, g_led_ptc[i].m_led_pin, 0);
    }
}

void set_led_by_bitsL(uint32_t value) {
    cleanup();
    for (int i = 0; i < value; i++) {
        GPIO_PinWrite(g_led_ptc[i].m_led_gpio, g_led_ptc[i].m_led_pin, 1);
    }
}

void set_led_by_bitsR(uint32_t value) {
    cleanup();
    for (int i = 7; i > 7 - value; i--) {
        GPIO_PinWrite(g_led_ptc[i].m_led_gpio, g_led_ptc[i].m_led_pin, 1);
    }
}

bool new_state = false;
char side = 'L';
uint32_t value = 0;

void task_monitor(void *pvParameters){
	while (1){
		if(new_state){
			new_state = false;
			if(side == 'L'){
				set_led_by_bitsL(value);
			}
			if(side == 'R'){
				set_led_by_bitsR(value);
			}

		}
		vTaskDelay(10);
	}
}

uint32_t parse_number(const char *str) {
    // Odstraň počáteční bílé znaky
    while (*str && isspace(*str)) {
        str++;
    }

    uint32_t result = 0;
    for (const char *p = str; *p; p++) {
        if (isspace(*p)) {
            break; // Ignoruj zbytek, pokud narazíš na bílý znak
        }
        if (*p < '0' || *p > '9') {
            PRINTF("Invalid character in number: %c\n", *p);
            return 0; // Pokud je znak neplatný, vraťte 0
        }
        result = result * 10 + (*p - '0');
    }
    return result;
}

#include <stdio.h>
void task_switches(void *t_arg) {
    PRINTF("Task switches started.\r\n");

    xSocket_t l_sock_client = *(xSocket_t *)t_arg; // Socket přijatý jako parametr
    uint32_t previous_button_state = 0; // Stav tlačítek z poslední iterace

    while (1) {
        // Přečtení aktuálního stavu tlačítek
        uint32_t current_button_state = 0;
        current_button_state |= (GPIO_PinRead(SW_PTC9_GPIO, SW_PTC9_PIN) == 0) << 0;  // Tlačítko 1
        current_button_state |= (GPIO_PinRead(SW_PTC10_GPIO, SW_PTC10_PIN) == 0) << 1; // Tlačítko 2
        current_button_state |= (GPIO_PinRead(SW_PTC11_GPIO, SW_PTC11_PIN) == 0) << 2; // Tlačítko 3
        current_button_state |= (GPIO_PinRead(SW_PTC12_GPIO, SW_PTC12_PIN) == 0) << 3; // Tlačítko 4

        // Porovnej stav jednotlivých tlačítek
        for (int i = 0; i < 4; i++) {
            uint32_t current_bit = (current_button_state >> i) & 0x1;
            uint32_t previous_bit = (previous_button_state >> i) & 0x1;

            if (current_bit != previous_bit) {
                // Stav tlačítka se změnil, odešli zprávu
                char message[16];
                snprintf(message, sizeof(message), "BUT%d %d\n", i + 1, current_bit);

                if (l_sock_client != FREERTOS_INVALID_SOCKET) {
                    FreeRTOS_send(l_sock_client, message, strlen(message), 0);
                }

                PRINTF("%s", message);
            }
        }

        // Aktualizuj předchozí stav tlačítek
        previous_button_state = current_button_state;

        vTaskDelay(pdMS_TO_TICKS(50));
    }
}






char task_buff[1024] = {};

// task socket server
void task_socket_srv( void *tp_arg )
{
    PRINTF( "Task socket server started.\r\n" );
    TickType_t l_receive_tout = 25000 / portTICK_PERIOD_MS;

    int l_port = ( int ) tp_arg;
    struct freertos_sockaddr l_srv_address;

    // set listening port
    l_srv_address.sin_port = FreeRTOS_htons( l_port );
    l_srv_address.sin_addr = FreeRTOS_inet_addr_quick( 0, 0, 0, 0 );

    xSocket_t l_sock_listen;
    xSocket_t l_sock_client;
    xWinProperties_t l_win_props;
    struct freertos_sockaddr from;
    socklen_t fromSize = sizeof from;
    BaseType_t l_bind_result;
    int8_t l_rx_buf[ SOCKET_SRV_BUF_SIZE ]; /* Make sure the stack is large enough to hold these.  Turn on stack overflow checking during debug to be sure. */

    /* Create a socket. */
    l_sock_listen = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
    configASSERT( l_sock_listen != FREERTOS_INVALID_SOCKET );

    l_bind_result = FreeRTOS_bind( l_sock_listen, &l_srv_address, sizeof l_srv_address );
    configASSERT( l_bind_result == 0 );

    // Set a time out so a missing reply does not cause the task to block indefinitely.
    FreeRTOS_setsockopt( l_sock_listen, 0, FREERTOS_SO_RCVTIMEO, &l_receive_tout, sizeof( l_receive_tout ) );
    FreeRTOS_setsockopt( l_sock_listen, 0, FREERTOS_SO_SNDTIMEO, &l_receive_tout, sizeof( l_receive_tout ) );

    memset( &l_win_props, '\0', sizeof l_win_props );
    // Size in units of MSS
    l_win_props.lTxBufSize   = SOCKET_SRV_BUF_SIZE;
    l_win_props.lTxWinSize   = 2;
    l_win_props.lRxBufSize   = SOCKET_SRV_BUF_SIZE;
    l_win_props.lRxWinSize   = 2;

    FreeRTOS_setsockopt( l_sock_listen, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &l_win_props, sizeof( l_win_props ) );

    FreeRTOS_listen( l_sock_listen, 2 );

    PRINTF( "Socket servers started, listen port %u.\r\n", FreeRTOS_ntohs( l_srv_address.sin_port ) );
    // go!
    for( ;; )
    {
        uint32_t l_reply_count = 0;
        // wait for client
        do {
            l_sock_client = FreeRTOS_accept( l_sock_listen, &from, &fromSize );
            vTaskDelay( SOCKET_SRV_TOUT );
        } while ( l_sock_client == NULL );

        if ( l_sock_client == FREERTOS_INVALID_SOCKET )
        {
            PRINTF( "Invalid socket from ACCEPT!\r\n" );
            continue;
        }
        if (xTaskCreate(task_switches, "TaskSwitches", configMINIMAL_STACK_SIZE + 200,
                        &l_sock_client, NORMAL_TASK_PRIORITY, NULL) != pdPASS) {
            PRINTF("Unable to create task 'TaskSwitches'.\r\n");
        }

        vTaskDelay( 100 );

        // Handle echo requests.
        for ( l_reply_count = 0; pdTRUE; l_reply_count++ )
        {
            BaseType_t l_len;

            // receive data
            l_len = FreeRTOS_recv(    l_sock_client, l_rx_buf, sizeof( l_rx_buf ), 0 );
            //
            if( l_len > 0 )
            {
                //1.
                /*l_rx_buf[ l_len ] = 0;    // just for printing
                // Při přijetí dat problikne zelená LED
                LedBlinkCommand blinkCmdGreen = {g_rgb[1].m_led_gpio, g_rgb[1].m_led_pin, pdMS_TO_TICKS(100)};
                xQueueSend(ledQueue, &blinkCmdGreen, 0);

                // Odeslání zpět klientovi
                l_len = FreeRTOS_send(l_sock_client, l_rx_buf, l_len, 0);

                // Při odeslání problikne červená LED
                LedBlinkCommand blinkCmdRed = {g_rgb[0].m_led_gpio, g_rgb[0].m_led_pin, pdMS_TO_TICKS(100)};
                xQueueSend(ledQueue, &blinkCmdRed, 0);*/

                //2.
                /*
                if (strncmp((char *)l_rx_buf, "morse", 5) == 0) {
                    if (morseActive == pdFALSE) {
                        // Zpracování příkazu morse
                        MorseCommand morseCmd;
                        strcpy(morseCmd.sequence, (char *)&l_rx_buf[6]);
                        morseCmd.clientSocket = l_sock_client; // Uložíme socket klienta

                        // Přidání příkazu do fronty
                        xQueueSend(morseQueue, &morseCmd, 0);
                        FreeRTOS_send(l_sock_client, "Morse OK\n", 9, 0);
                    } else {
                        // Morseovka je aktivní, ignorujeme příkaz
                        FreeRTOS_send(l_sock_client, "Morse ignoring\n", 16, 0);
                    }
                }*/
                //3.
                /*if (strncmp((char *)l_rx_buf, "RGB", 3) == 0) {
                    PRINTF("Received full command: %s\n", (char *)l_rx_buf);

                    // Získání délky přijatých dat
                    size_t len = strlen((char *)l_rx_buf);
                    PRINTF("Command length before trim: %d\n", len);

                    // Oříznutí přijatého příkazu na první ukončovací znak
                    for (size_t i = 0; i < len; i++) {
                        if (l_rx_buf[i] == '\r' || l_rx_buf[i] == '\n') {
                            l_rx_buf[i] = '\0';
                            break;
                        }
                    }

                    PRINTF("Trimmed command: %s\n", (char *)l_rx_buf);

                    // Extrakce barvy z příkazu
                    char *color = (char *)&l_rx_buf[4];
                    PRINTF("Extracted color: %s\n", color);

                    // Kontrola formátu příkazu
                    if (strlen(color) == 7 && color[0] == '#') {
                        set_rgb_color(color); // Nastavení barvy
                        FreeRTOS_send(l_sock_client, "RGB OK\n", 7, 0);
                    } else {
                        PRINTF("Invalid RGB format: %s\n", color);
                        FreeRTOS_send(l_sock_client, "RGB ERROR\n", 10, 0);
                    }
                }*/

            	l_rx_buf[l_len] = '\0';

                if (strncmp((char *)l_rx_buf, "LED L", 5) == 0) {
                    PRINTF("Received LED command: %s\n", (char *)l_rx_buf);

                    // Extrahuj číslo z příkazu
                    char *number_str = (char *)&l_rx_buf[5]; // Za "LED "
                    uint32_t number = parse_number(number_str);

                    value = number;
                    new_state = true;
                    side = 'L';
                    // Nastav LED podle bitového vzoru
                    //set_led_by_bitsL(number);

                    //FreeRTOS_send(l_sock_client, "LED OK\n", 7, 0);
                }

                if (strncmp((char *)l_rx_buf, "LED R", 5) == 0) {
                     PRINTF("Received LED command: %s\n", (char *)l_rx_buf);

                     // Extrahuj číslo z příkazu
                     char *number_str = (char *)&l_rx_buf[5]; // Za "LED "
                     PRINTF("nas znak : %s",number_str);
                     uint32_t number = parse_number(number_str);
                     PRINTF("nase cislo : %d",number);

                     value = number;
                     new_state = true;
                     side = 'R';

                     // Nastav LED podle bitového vzoru
                     //set_led_by_bitsR(number);

                     FreeRTOS_send(l_sock_client, "LED OK\n", 7, 0);
                 }

                if(strncmp((char *)l_rx_buf, "LIST", 4) == 0){

                    vTaskList(task_buff);
                    int len = 0;
                    while(1){
                        if(strlen(task_buff+len) < 1 || len > 1024) break;
                        len += 256;
                        FreeRTOS_send(l_sock_client, (void*) task_buff, strlen(task_buff), 0);
                    }
                }



                PRINTF( "Server forwarded %d bytes.\r\n", l_len );
            }
            if ( l_len < 0 )
            {
                // FreeRTOS_debug_printf( ( "FreeRTOS_recv: rc = %ld.\n", l_len ) );
                // Probably '-FREERTOS_ERRNO_ENOTCONN', see FreeRTOS_IP.h
                break;
            }
            if ( l_len == 0 )
            {
                PRINTF( "Recv timeout.\r\n" );
                //FreeRTOS_setsockopt( l_sock_listen, 0, FREERTOS_SO_RCVTIMEO, &l_receive_tout, sizeof( l_receive_tout ) );
            }
        }
        PRINTF( "Socket server replied %d times.\r\n", l_reply_count );

        // Pause for a short while to ensure the network is not too    congested.
        vTaskDelay( SOCKET_SRV_TOUT );

        // Close this socket before looping back to create another.
        FreeRTOS_closesocket( l_sock_client );
        l_sock_client = NULL;
    }
}

void task_socket_cli( void *tp_arg )
{
    PRINTF( "Task socket client started. \r\n" );

    vTaskDelay( 500 );

       Socket_t l_sock_server = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
    struct freertos_sockaddr *lp_sever_addr = ( freertos_sockaddr * ) tp_arg;
    BaseType_t l_res = FreeRTOS_connect( l_sock_server, lp_sever_addr, sizeof( freertos_sockaddr ) );

    if ( l_res == 0 )
    {
        PRINTF( "Connect to server %d.\r\n", l_res );

        for ( int i = 0; i < 10; i++ )
        {
            l_res = FreeRTOS_send( l_sock_server, "Hello\n", 6, 0 );
            PRINTF( "send %d...\r\n", l_res );
            if ( l_res < 0 ) break;
            vTaskDelay( 500 );
        }
    }
    else
    {
        PRINTF( "Unable to connect server!\r\n" );
    }

    FreeRTOS_closesocket( l_sock_server );

    vTaskDelete( NULL );
}


// Callback from TCP stack - interface state changed
void vApplicationIPNetworkEventHook( eIPCallbackEvent_t t_network_event )
{
    static BaseType_t s_task_already_created = pdFALSE;
    static freertos_sockaddr s_server_addr;
    s_server_addr.sin_port = FreeRTOS_htons( SOCKET_CLI_PORT );
    s_server_addr.sin_addr = FreeRTOS_inet_addr_quick( 10, 0, 0, 1 );

    // Both eNetworkUp and eNetworkDown events can be processed here.
    if ( t_network_event == eNetworkUp )
    {
        PRINTF( "Network interface UP.\r\n" );
        // Create the tasks that use the TCP/IP stack if they have not already been created.
        if ( s_task_already_created == pdFALSE )
        {
             // For convenience, tasks that use FreeRTOS+TCP can be created here
             // to ensure they are not created before the network is usable.
            if ( xTaskCreate( task_socket_srv, TASK_NAME_SOCKET_SRV, configMINIMAL_STACK_SIZE + 1024,
                    ( void * ) SOCKET_SRV_PORT, configMAX_PRIORITIES - 1, NULL ) != pdPASS )
            {
                PRINTF( "Unable to create task %s.\r\n", TASK_NAME_SOCKET_SRV );
            }
            // Create task for socket client
            /*
            if ( xTaskCreate( task_socket_cli, TASK_NAME_SOCKET_CLI, configMINIMAL_STACK_SIZE + 1024,
                    &s_server_addr, configMAX_PRIORITIES - 1, NULL ) != pdPASS )
            {
                PRINTF( "Unable to create task %s.\r\n", TASK_NAME_SOCKET_CLI );
            }
             */
            s_task_already_created = pdTRUE;
        }
    }
}



/*
 * @brief   Application entry point.
 */
int main(void) {

      /* Init board hardware. */
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
      /* Init FSL debug console. */
    BOARD_InitDebugConsole();

    SYSMPU_Enable( SYSMPU, false );

    PRINTF( "FreeRTOS+TCP started.\r\n" );

    // SET CORRECTLY MAC ADDRESS FOR USAGE IN LAB!
    //
    // Computer in lab use IP address 158.196.XXX.YYY.
    // Set MAC to 5A FE C0 DE XXX YYY+21
    // IP address will be configured from DHCP
    //
    // uint8_t ucMAC[ ipMAC_ADDRESS_LENGTH_BYTES ] = { 0x5A, 0xFE, 0xC0, 0xDE, 0x00, 0x00 };

    //uint8_t ucMAC[ ipMAC_ADDRESS_LENGTH_BYTES ] = { 0x5A, 0xFE, 0xC0, 0xDE, 0x8E, 0x62 }; // 142 = 0x8E, 98 = 0x62

    uint8_t ucMAC[ ipMAC_ADDRESS_LENGTH_BYTES ] = { 0x5A, 0xFE, 0xC0, 0xDE, 0x8E, 0x5D }; // 142 = 0x8E, 97 = 0x61

       uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ] = { 10, 0, 0, 10 };
       uint8_t ucIPMask[ ipIP_ADDRESS_LENGTH_BYTES ] = { 255, 255, 255, 0 };
       uint8_t ucIPGW[ ipIP_ADDRESS_LENGTH_BYTES ] = { 10, 0, 0, 1 };

    FreeRTOS_IPInit( ucIPAddress,  ucIPMask,  ucIPGW,  NULL,  ucMAC );


    ledQueue = xQueueCreate(10, sizeof(LedBlinkCommand));
    morseQueue = xQueueCreate(1, sizeof(MorseCommand)); // Fronta pro Morseovku
    //rgbQueue = xQueueCreate(1, sizeof(RgbCommand)); // Fronta pro RGB příkazy

    // Create tasks

    xTaskCreate(task_led_blink, "LED Blink", configMINIMAL_STACK_SIZE, NULL, NORMAL_TASK_PRIORITY, NULL);
    /*
    xTaskCreate(task_morse, "Morse Task", configMINIMAL_STACK_SIZE + 200, NULL, NORMAL_TASK_PRIORITY, NULL);
    xTaskCreate(task_rgb, "RGB Task", configMINIMAL_STACK_SIZE, NULL, NORMAL_TASK_PRIORITY, NULL);
    */
    if(xTaskCreate(task_monitor, "Monitor task", configMINIMAL_STACK_SIZE, NULL, NORMAL_TASK_PRIORITY, NULL) != pdPASS){
    	PRINTF( "Unable to create task '%s'.\r\n", TASK_NAME_LED_PTA );
    }
    //xTaskCreate(task_switches, "Swiches", configMINIMAL_STACK_SIZE, NULL, NORMAL_TASK_PRIORITY, NULL);
    //xTaskCreate(task_socket_srv, "Socket Server", configMINIMAL_STACK_SIZE + 1024, (void *)SOCKET_SRV_PORT, NORMAL_TASK_PRIORITY, NULL);

    /*if ( xTaskCreate(
                task_led_pta_blink,
                TASK_NAME_LED_PTA,
                configMINIMAL_STACK_SIZE + 100,
                NULL,
                NORMAL_TASK_PRIORITY,
                NULL ) != pdPASS )
        {
            PRINTF( "Unable to create task '%s'.\r\n", TASK_NAME_LED_PTA );
        }*/


    vTaskStartScheduler();

    while ( 1 );

    return 0 ;
}